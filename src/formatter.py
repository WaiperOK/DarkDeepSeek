"""
–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è my-pentest-gpt
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π Markdown –≤—ã–≤–æ–¥ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
"""
from typing import Optional, Dict, Any
from datetime import datetime
import re
import logging

logger = logging.getLogger(__name__)

class MarkdownFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)

    def format_exploit_report(self, code: str, task_type: str = "exploit",
                            reasoning: Optional[str] = None, metadata: Optional[Dict] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∞"""

        extracted_code = self._create_code_section(code)

        if extracted_code:
            extracted_code = self._fix_code_formatting(extracted_code)

        sections = []

        sections.append(f"# üéØ EXPLOIT REPORT - {task_type.upper()}")
        sections.append(f"**–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        if metadata:
            sections.append(f"**–ú–æ–¥–µ–ª—å:** {metadata.get('model', 'Unknown')}")
            sections.append(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {metadata.get('temperature', 'Unknown')}")
            sections.append(f"**–¢–æ–∫–µ–Ω—ã:** {metadata.get('max_tokens', 'Unknown')}")

        sections.append("")

        if reasoning:
            short_reasoning = self._shorten_reasoning(reasoning)
            sections.append("## üß† –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            sections.append(short_reasoning)
            sections.append("")

        non_code_content = self._remove_code_blocks(code)
        if non_code_content.strip():
            sections.append("## üìù –û–ø–∏—Å–∞–Ω–∏–µ")
            sections.append(non_code_content.strip())
            sections.append("")

        if extracted_code:
            sections.append("## üíª –ö–æ–¥")
            sections.append("```javascript")
            formatted_code = self._aggressive_code_formatting(extracted_code)
            sections.append(formatted_code)
            sections.append("```")
            sections.append("")

        sections.append("## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        sections.append("–î–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        sections.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")

        return "\n".join(sections)

    def _shorten_reasoning(self, reasoning: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç reasoning –¥–æ 3-5 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫"""
        if not reasoning:
            return ""

        clean_reasoning = reasoning.replace('<think>', '').replace('</think>', '').strip()

        sentences = clean_reasoning.split('. ')
        if len(sentences) > 3:
            short_sentences = sentences[:3]
            return '. '.join(short_sentences) + '.'

        if len(clean_reasoning) > 200:
            return clean_reasoning[:200] + "..."

        return clean_reasoning

    def _fix_code_formatting(self, code: str) -> str:
        """–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
        if not code:
            return ""

        code = code.strip()

        code = re.sub(r'\s+', ' ', code)
        code = re.sub(r';\s*([a-zA-Z])', r';\n\1', code)
        code = re.sub(r'{\s*([a-zA-Z])', r'{\n\1', code)
        code = re.sub(r'}\s*([a-zA-Z])', r'}\n\1', code)

        return code

    def _aggressive_code_formatting(self, code: str) -> str:
        """–ê–ì–†–ï–°–°–ò–í–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏"""

        formatted = self._fix_code_formatting(code)

        formatted = self._force_html_formatting(formatted)

        formatted = self._force_js_formatting(formatted)

        return formatted

    def _force_html_formatting(self, code: str) -> str:
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML —Ç–µ–≥–∏"""

        html_patterns = [
            (r'<(\w+)([^>]*)>', r'<\1\2>\n'),
            (r'</(\w+)>', r'\n</\1>\n'),
            (r'><', r'>\n<'),
            (r'<head>', r'<head>\n'),
            (r'</head>', r'\n</head>\n'),
            (r'<body([^>]*)>', r'<body\1>\n'),
            (r'</body>', r'\n</body>\n'),
            (r'<script([^>]*)>', r'<script\1>\n'),
            (r'</script>', r'\n</script>\n'),
            (r'<style([^>]*)>', r'<style\1>\n'),
            (r'</style>', r'\n</style>\n'),
            (r'<div([^>]*)>', r'<div\1>\n'),
            (r'</div>', r'\n</div>\n'),
        ]

        for pattern, replacement in html_patterns:
            code = re.sub(pattern, replacement, code, flags=re.IGNORECASE)

        return code

    def _force_js_formatting(self, code: str) -> str:
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JavaScript"""

        js_patterns = [
            (r';\s*([a-zA-Z_$])', r';\n\1'),
            (r'{\s*([a-zA-Z_$])', r'{\n    \1'),
            (r'}\s*([a-zA-Z_$])', r'}\n\1'),
            (r'function\s+([a-zA-Z_$]\w*)', r'\nfunction \1'),
            (r'const\s+([a-zA-Z_$]\w*)', r'\nconst \1'),
            (r'let\s+([a-zA-Z_$]\w*)', r'\nlet \1'),
            (r'var\s+([a-zA-Z_$]\w*)', r'\nvar \1'),
            (r'if\s*\(', r'\nif ('),
            (r'for\s*\(', r'\nfor ('),
            (r'while\s*\(', r'\nwhile ('),
            (r'try\s*{', r'\ntry {'),
            (r'catch\s*\(', r'\ncatch ('),
            (r'}else{', r'} else {'),
            (r'}else\s+if\s*\(', r'} else if ('),
        ]

        for pattern, replacement in js_patterns:
            code = re.sub(pattern, replacement, code)

        lines = code.split('\n')
        formatted_lines = []
        indent_level = 0

        for line in lines:
            stripped = line.strip()
            if not stripped:
                formatted_lines.append('')
                continue

            if stripped.startswith('}') or stripped.startswith('</'):
                indent_level = max(0, indent_level - 1)

            indented_line = '    ' * indent_level + stripped
            formatted_lines.append(indented_line)

            if stripped.endswith('{') or stripped.endswith('>') and '</' not in stripped:
                indent_level += 1

        return '\n'.join(formatted_lines)

    def _create_header(self, task_type: str = "exploit", metadata: Optional[Dict[str, Any]] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞"""
        task_names = {
            "exploit": "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≠–∫—Å–ø–ª–æ–π—Ç–∞",
            "analyze": "üîç –ê–Ω–∞–ª–∏–∑ –£—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "reverse": "üõ†Ô∏è –†–µ–≤–µ—Ä—Å-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥",
            "network": "üåê –°–µ—Ç–µ–≤–∞—è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "web": "üåç –í–µ–±-–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        }

        title = task_names.get(task_type, "üîß –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

        if metadata and metadata.get("target"):
            title += f" - {metadata['target']}"

        header = f"# {title}\n"
        header += f"*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"

        return header

    def _create_metadata_section(self, metadata: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        section = "## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"

        info_items = []
        if metadata.get("model"):
            info_items.append(f"**–ú–æ–¥–µ–ª—å:** {metadata['model']}")
        if metadata.get("template"):
            info_items.append(f"**–®–∞–±–ª–æ–Ω:** {metadata['template']}")
        if metadata.get("target"):
            info_items.append(f"**–¶–µ–ª—å:** {metadata['target']}")
        if metadata.get("temperature"):
            info_items.append(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {metadata['temperature']}")

        section += "\n".join(info_items)
        return section

    def _create_code_section(self, code: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∫–æ–¥–æ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º"""
        if not code.strip():
            return "## üíª –ö–æ–¥\n\n–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."


        extracted_code = None

        import re
        code_blocks = re.findall(r'```(?:\w+)?\s*\n(.*?)\n```', code, re.DOTALL | re.IGNORECASE)
        if code_blocks:
            extracted_code = '\n'.join(code_blocks)

        if not extracted_code:
            code_blocks = re.findall(r'```\s*\n(.*?)\n```', code, re.DOTALL)
            if code_blocks:
                extracted_code = '\n'.join(code_blocks)

        if not extracted_code:
            markers = [
                r'(?i)(?:–∫–æ–¥|code)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)',
                r'(?i)(?:—ç–∫—Å–ø–ª–æ–π—Ç|exploit)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)',
                r'(?i)(?:—Å–∫—Ä–∏–ø—Ç|script)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)',
                r'(?i)(?:–∫–æ–º–∞–Ω–¥–∞|command)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)',
                r'(?i)(?:payload|–ø–µ–π–ª–æ–∞–¥)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)',
                r'(?i)(?:–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç|tool)[:Ôºö]\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—èA-Za-z]|\Z)'
            ]

            for marker in markers:
                matches = re.findall(marker, code, re.DOTALL)
                if matches:
                    extracted_code = '\n'.join(matches)
                    break

        if not extracted_code:
            deepseek_patterns = [
                r'(?i)(?:–≤–æ—Ç –∫–æ–¥|here\'s the code|code example)[:Ôºö]?\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—è]{20,}|\Z)',
                r'(?i)(?:–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞|code sample)[:Ôºö]?\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—è]{20,}|\Z)',
                r'(?i)(?:—Ä–µ—à–µ–Ω–∏–µ|solution)[:Ôºö]?\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—è]{20,}|\Z)',
                r'(?i)(?:poc|proof of concept)[:Ôºö]?\s*\n(.*?)(?=\n\n|\n[–ê-–Ø–∞-—è]{20,}|\Z)'
            ]

            for pattern in deepseek_patterns:
                matches = re.findall(pattern, code, re.DOTALL)
                if matches:
                    extracted_code = '\n'.join(matches)
                    break

        if not extracted_code:
            code_lines = []
            for line in code.split('\n'):
                line = line.strip()
                if line and self._is_code_line(line):
                    code_lines.append(line)

            if code_lines:
                extracted_code = '\n'.join(code_lines)

        if not extracted_code:
            extracted_code = self._extract_technical_content(code)

        if not extracted_code or len(extracted_code.strip()) < 10:
            potential_code = []
            for line in code.split('\n'):
                line = line.strip()
                if line and any(char in line for char in ['()', '{}', '[]', '<>', '==', '!=', '->', '=>', '&&', '||']):
                    potential_code.append(line)

            if potential_code:
                extracted_code = '\n'.join(potential_code)
            else:
                return "## üíª –ö–æ–¥\n\n–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."

        extracted_code = extracted_code.strip()

        language = self._detect_language(extracted_code)

        section = "## üíª –ö–æ–¥\n\n"
        section += f"```{language}\n{extracted_code}\n```\n"

        return section

    def _is_code_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –∫–æ–¥"""
        import re

        if len(line) < 3:
            return False

        if re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s.,!?]+$', line) and len(line) > 20:
            return False

        code_keywords = [
            'import ', 'from ', 'def ', 'class ', 'if ', 'for ', 'while ', 'try:', 'except:',
            'print(', 'len(', 'str(', 'int(', '__name__', '__main__', 'self.',

            'function ', 'var ', 'let ', 'const ', 'console.log', 'document.', 'window.',
            'alert(', 'setTimeout', 'getElementById', '.innerHTML', '.value',

            'curl ', 'wget ', 'echo ', 'grep ', 'sed ', 'awk ', 'cat ', 'ls ', 'cd ',
            'chmod ', 'chown ', 'sudo ', 'apt-get', 'yum ', 'pip ', 'npm ',

            'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'CREATE', 'DROP', 'ALTER',
            'UNION', 'WHERE', 'ORDER BY', 'GROUP BY', 'OR 1=1', "' OR '",

            '<script>', '<html>', '<body>', '<div>', '<span>', '<input>',
            '</script>', '</html>', '</body>', '</div>',

            'alert(', 'prompt(', 'confirm(', 'eval(', 'setTimeout(',
            'document.cookie', 'window.location', 'localStorage',

            'nmap ', 'sqlmap', 'metasploit', 'payload', 'exploit',
            'netcat', 'nc -', 'telnet ', '/etc/passwd', '/bin/sh',

            ' = ', ' == ', ' != ', ' >= ', ' <= ', ' && ', ' || ',
            ' += ', ' -= ', ' *= ', ' /= ', '=>', '->'
        ]

        line_lower = line.lower()
        for keyword in code_keywords:
            if keyword.lower() in line_lower:
                return True

        code_patterns = [
            r'^[a-zA-Z_][a-zA-Z0-9_]*\s*[=\(]',
            r'^\s*[#//]',
            r'^\s*<[a-zA-Z]',
            r'[{}\[\]();]',
            r'https?://',
            r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b',
            r"['\"][^'\"]*['\"]",
            r'[A-Z0-9]{16,}',
        ]

        for pattern in code_patterns:
            if re.search(pattern, line):
                return True

        return False

    def _extract_technical_content(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re

        patterns = [
            r'https?://[^\s]+',
            r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b',
            r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',
            r'[A-Z0-9]{32,}',
            r'[a-fA-F0-9]{8,}',
            r'\$[a-zA-Z_][a-zA-Z0-9_]*',
            r'[a-zA-Z_][a-zA-Z0-9_]*\(\)',
            r'--[a-zA-Z-]+',
            r'-[a-zA-Z]',
        ]

        technical_content = []
        for line in text.split('\n'):
            for pattern in patterns:
                if re.search(pattern, line):
                    technical_content.append(line.strip())
                    break

        return '\n'.join(technical_content) if technical_content else ""

    def _detect_language(self, code: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–¥—É"""
        code_lower = code.lower()

        if any(keyword in code_lower for keyword in ['import ', 'def ', 'print(', 'if __name__']):
            return "python"

        if any(keyword in code_lower for keyword in ['#!/bin/bash', '#!/bin/sh', 'curl ', 'wget ', 'grep ']):
            return "bash"

        if any(keyword in code_lower for keyword in ['function ', 'var ', 'let ', 'const ', 'console.log']):
            return "javascript"

        if any(keyword in code_lower for keyword in ['select ', 'insert ', 'update ', 'delete ', 'union ']):
            return "sql"

        if any(keyword in code_lower for keyword in ['powershell', 'invoke-', 'get-', 'set-']):
            return "powershell"

        return "text"

    def _create_reasoning_section(self, reasoning: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏"""
        section = "## üß† –ê–Ω–∞–ª–∏–∑ –∏ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è\n\n"

        formatted_reasoning = self._format_reasoning_text(reasoning)
        section += formatted_reasoning

        return section

    def _format_reasoning_text(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
        text = re.sub(r'\n\s*\n', '\n\n', text.strip())

        lines = text.split('\n')
        formatted_lines = []

        for line in lines:
            line = line.strip()
            if line.startswith(('1.', '2.', '3.', '4.', '5.')):
                formatted_lines.append(f"**{line}**")
            elif line.startswith('-') or line.startswith('*'):
                formatted_lines.append(f"  {line}")
            else:
                formatted_lines.append(line)

        return '\n'.join(formatted_lines)


def format_markdown(code: str,
                   task_type: str = "exploit",
                   reasoning: Optional[str] = None,
                   metadata: Optional[Dict[str, Any]] = None) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown

    Args:
        code: –ö–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏
        reasoning: –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown
    """
    formatter = MarkdownFormatter()
    return formatter.format_exploit_report(code, task_type, reasoning, metadata)

def create_simple_code_block(code: str, language: str = "python") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –±–ª–æ–∫ –∫–æ–¥–∞"""
    return f"```{language}\n{code.strip()}\n```"

def add_security_comment(code: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –º–æ—â–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    comment = "# –ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
    return comment + code

if __name__ == "__main__":
    test_code = """
import requests

def test_sql_injection(url):
    payload = "' OR 1=1 --"
    response = requests.post(url, data={'username': payload})
    return response.text
"""

    formatter = MarkdownFormatter()
    result = formatter.format_exploit_report(
        code=test_code,
        task_type="exploit",
        metadata={"target": "SQL Injection", "model": "DeepSeek-R1-8B"}
    )

    print(result)
