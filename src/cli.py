"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è my-pentest-gpt
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""
import typer
from typing import Optional
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.syntax import Syntax
import logging

from .config import ensure_directories
from .prompt_manager import get_template
from .thinker import apply_think, ThinkingEngine
from .generator import get_generator
from .formatter import format_markdown
from .lora_trainer import train_lora

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = typer.Typer(
    name="my-pentest-gpt",
    help="üõ°Ô∏è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞–∑–µ DeepSeek-R1-8B",
    epilog="–°–æ–∑–¥–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π."
)

console = Console()

@app.command()
def generate(
    task: str = typer.Argument(..., help="–¢–∏–ø –∑–∞–¥–∞—á–∏ (generate_exploit, analyze_vulnerability, etc.)"),
    prompt_set: str = typer.Option("default", "--prompt-set", "-p", help="–ù–∞–±–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤"),
    model: str = typer.Option("deepseek-r1-8b", "--model", "-m", help="–ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
    think: bool = typer.Option(True, "--think/--no-think", help="–í–∫–ª—é—á–∏—Ç—å Chain-of-Thought —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"),
    use_lora: bool = typer.Option(False, "--lora/--no-lora", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LoRA –∞–¥–∞–ø—Ç–µ—Ä"),
    temperature: float = typer.Option(0.7, "--temp", "-t", help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"),
    max_tokens: int = typer.Option(4096, "--max-tokens", help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"),
    target: Optional[str] = typer.Option(None, "--target", help="–¶–µ–ª—å –∞—Ç–∞–∫–∏/–∞–Ω–∞–ª–∏–∑–∞"),
    custom_prompt: Optional[str] = typer.Option(None, "--custom", help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç")
):
    """
    üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    console.print(Panel.fit(
        "[bold blue]my-pentest-gpt[/] - AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        border_style="blue"
    ))

    try:
        ensure_directories()

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:

            progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞...", total=None)

            try:
                template_data = get_template(task, prompt_set)
                user_prompt = custom_prompt or template_data["user_template"]

                if target:
                    user_prompt += f"\n\n–¶–µ–ª—å: {target}"

            except ValueError as e:
                console.print(f"[red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}[/red]")
                raise typer.Exit(1)

            progress.add_task("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Chain-of-Thought...", total=None)

            task_type = _detect_task_type(task)
            enhanced_prompt = apply_think(user_prompt, think, task_type)

            progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...", total=None)

            generator = get_generator(use_lora=use_lora)

            progress.add_task("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...", total=None)

            generated_text = generator.generate_with_system_prompt(
                template_data["system_prompt"],
                enhanced_prompt,
                temperature=temperature,
                max_tokens=max_tokens
            )

            progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...", total=None)

            thinking_engine = ThinkingEngine()
            code, reasoning = thinking_engine.extract_reasoning(generated_text)

            if not code:
                code = generated_text

        metadata = {
            "model": model,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "lora_enabled": use_lora,
            "thinking_enabled": think
        }

        task_info = {
            "task_name": task,
            "description": template_data.get("description", ""),
            "target": target or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        }

        formatted_result = format_markdown(code, reasoning, task_info, metadata)

        console.print("\n" + "="*60)
        console.print(formatted_result)
        console.print("="*60 + "\n")

        if output:
            output.parent.mkdir(parents=True, exist_ok=True)
            with open(output, 'w', encoding='utf-8') as f:
                f.write(formatted_result)

            console.print(f"[green]‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}[/green]")

        if code:
            console.print("\n[bold]–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:[/bold]")
            syntax = Syntax(code, "python", theme="monokai", line_numbers=True)
            console.print(syntax)

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}[/red]")
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        raise typer.Exit(1)

@app.command()
def train(
    data_path: Optional[Path] = typer.Option(None, "--data", "-d", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö (JSONL)"),
    epochs: int = typer.Option(3, "--epochs", "-e", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö"),
    batch_size: int = typer.Option(8, "--batch-size", "-b", help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞"),
    learning_rate: float = typer.Option(3e-4, "--lr", help="–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
):
    """
    üéØ –û–±—É—á–∞–µ—Ç LoRA –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    console.print(Panel.fit(
        "[bold green]LoRA –û–±—É—á–µ–Ω–∏–µ[/] - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏",
        border_style="green"
    ))

    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:

            progress.add_task("–ó–∞–ø—É—Å–∫ LoRA –æ–±—É—á–µ–Ω–∏—è...", total=None)

            train_lora(
                data_path=data_path,
                epochs=epochs,
                batch_size=batch_size,
                learning_rate=learning_rate
            )

        console.print("[green]‚úÖ LoRA –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}[/red]")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}", exc_info=True)
        raise typer.Exit(1)

@app.command()
def list_templates():
    """
    üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    """
    from .prompt_manager import prompt_manager

    templates = prompt_manager.list_templates()

    if not templates:
        console.print("[yellow]‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        return

    console.print("[bold]–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:[/bold]\n")

    for template in templates:
        console.print(f"‚Ä¢ [blue]{template['name']}[/blue]: {template['description']}")

@app.command()
def setup():
    """
    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    """
    console.print(Panel.fit(
        "[bold cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ my-pentest-gpt[/]",
        border_style="cyan"
    ))

    try:
        ensure_directories()

        _create_default_prompts()

        console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
        console.print("\n[bold]–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:[/bold]")
        console.print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å DeepSeek-R1-8B –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        console.print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: [cyan]my-pentest-gpt generate generate_exploit[/cyan]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}[/red]")
        raise typer.Exit(1)

def _detect_task_type(task: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è Chain-of-Thought"""
    if "analyze" in task.lower():
        return "analyze"
    elif "reverse" in task.lower():
        return "reverse"
    else:
        return "exploit"

def _create_default_prompts():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    from .config import PROMPTS_DIR
    import json

    default_prompts = {
        "templates": [
            {
                "name": "generate_exploit",
                "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–∞ –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "system_prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ PoC-—ç–∫—Å–ø–ª–æ–π—Ç—ã. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
                "user_template": "–°–æ–∑–¥–∞–π —ç–∫—Å–ø–ª–æ–π—Ç –¥–ª—è {vulnerability_type}. –í–∫–ª—é—á–∏:\n1. –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n2. Proof-of-Concept –∫–æ–¥\n3. –ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã\n4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                "examples": []
            },
            {
                "name": "analyze_vulnerability",
                "description": "–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ",
                "system_prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –ø–æ–∏—Å–∫—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–æ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.",
                "user_template": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:\n\n{code}\n\n–í–∫–ª—é—á–∏:\n1. –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n2. –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏\n3. –°–ø–æ—Å–æ–±—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏\n4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                "examples": []
            },
            {
                "name": "reverse_engineering",
                "description": "–ü–æ–º–æ—â—å –≤ —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–µ",
                "system_prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥—É –∏ –∞–Ω–∞–ª–∏–∑—É malware. –ü–æ–º–æ–≥–∞–π –≤ –ª–µ–≥–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.",
                "user_template": "–ü–æ–º–æ–≥–∏ —Å —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–æ–º:\n{target_description}\n\n–í–∫–ª—é—á–∏:\n1. –ü–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É\n2. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n3. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é\n4. –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                "examples": []
            }
        ]
    }

    default_path = PROMPTS_DIR / "default_prompts.json"
    with open(default_path, 'w', encoding='utf-8') as f:
        json.dump(default_prompts, f, ensure_ascii=False, indent=2)

    console.print(f"[green]‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø—Ä–æ–º–ø—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_path}[/green]")

if __name__ == "__main__":
    app()
